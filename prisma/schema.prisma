generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @default(student)
  accessibility Accessibility[] @default([])
  accounts      Account[]
  classesTeach  Classroom[]     @relation("TeacherClasses")
  sessions      Session[]
  classesJoin   Classroom[]     @relation("StudentClasses")
  studentFiles  StudentFiles[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id        String   @id @default(cuid())
  name      String
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacherId String
  teacher   User     @relation("TeacherClasses", fields: [teacherId], references: [id], onDelete: Cascade)
  files     Files[]
  students  User[]   @relation("StudentClasses")

  @@unique([teacherId, name])
}

model StudentFiles {
  id                String    @id @default(cuid())
  name              String
  link              String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  audioLink         String?
  status            Status    @default(processing)
  extractedText     String?
  blindFriendlyLink String?
  transcript        Json?
  dislexiaFriendly  Json?
  studentId        String
  Student          User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model Files {
  id                String    @id @default(cuid())
  name              String
  link              String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  classId           String
  audioLink         String?
  status            Status    @default(processing)
  extractedText     String?
  blindFriendlyLink String?
  transcript        Json?
  dislexiaFriendly  Json?
  class             Classroom @relation(fields: [classId], references: [id], onDelete: Cascade)
}

enum Role {
  student
  teacher
}

enum Accessibility {
  dyslexia
  visualImpairment
  hearingImpairment
  cognitiveDisability
}

enum Status {
  processing
  completed
  failed
}
